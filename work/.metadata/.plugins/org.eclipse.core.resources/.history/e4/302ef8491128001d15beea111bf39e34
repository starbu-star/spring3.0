package com.jdbc.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import com.jdbc.dto.BoardDTO;

public class BoardDAO2 {
	private JdbcTemplate jdbcTemplate;
	
	public void setJdbcTemplate(JdbcTemplate jdbcTemplate) throws Exception {
		this.jdbcTemplate =jdbcTemplate;
	}
	
	//입력관련 메소드 만들기!
	//num의 최대값 구하기!
	
	 public int getMaxNum() {
		 int maxNum = 0;
		 StringBuilder sql = new StringBuilder(100);
			
			 sql.append("select nvl(max(num),0) from board");
			 maxNum= jdbcTemplate.queryForInt(sql.toString());
			 
		return maxNum; 
	 }
	 
	 
	 //입력
	 public void insertData(BoardDTO dto) {
		 
	
		 StringBuilder sql = new StringBuilder(200);
	
			 sql.append("insert into board (num,name,pwd,email,subject,");
			 sql.append("content,ipAddr,hitCount,created) ");
			 sql.append("values (?,?,?,?,?,?,?,0,sysdate)");
			 
			 jdbcTemplate.update(sql.toString(), dto.getNum(),dto.getName(),dto.getPwd(),dto.getEmail(),
					 dto.getSubject(),dto.getContent(),dto.getIpAddr());
			 
		 	 }
	 
	 //전체데이터 가져오기
	 public List<BoardDTO> getLists(int start, int end,
			 String searchKey,String searchValue){
			
		 	StringBuilder sql = new StringBuilder(500);
				searchValue = "%" + searchValue + "%";
				
			sql.append("select * from (")
			.append("select rownum rnum,data.* from(")
			.append("select num,name,subject,hitCount,")
			.append("to_char(created,'YYYY-MM-DD') created ")
			.append("from board where " + searchKey + " like ? order by num desc) data) ")
			.append("where rnum>=? and rnum<=?");
				
			List<BoardDTO> lists = jdbcTemplate.query(sql.toString(), new Object[] 
					{searchValue,start,end},new RowMapper<BoardDTO() {

						@Override
						public BoardDTO mapRow(ResultSet rs, int rowNum) throws SQLException {
							BoardDTO dto = new BoardDTO();
							
							dto.setNum(rs.getInt("num"));
							dto.setName(rs.getString("name"));
							dto.setSubject(rs.getString("subject"));
							dto.setHitCount(rs.getInt("hitCount"));
							dto.setCreated(rs.getString("created"));
							return null;
						}
					
					}>)
			
			
					
			
					
			
			return lists;
			
		}
	 //전체데이터의 갯수(맨위랑 같아 )

	public int getDataCount(String searchKey,String searchValue) {
		int dataCount = 0;

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql;
		try {
			searchValue = "%" + searchValue + "%";
			
			sql = "select nvl(count(*),0) from board ";
			sql+= "where " + searchKey + " like ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, searchValue);
			
			rs = pstmt.executeQuery();

			if (rs.next()) {
				dataCount = rs.getInt(1); // 파생컬럼이라 이름이 없어서
			}
			rs.close();
			pstmt.close();
		} catch (Exception e) {
			System.out.println(e.toString());
		}
		return dataCount;
	}
	//num으로 한개의 데이터 가져오기
	public BoardDTO getReadData(int num) {
		BoardDTO dto =null;
		PreparedStatement pstmt = null;
		ResultSet rs =null;
		String sql;
		
		try {
			sql ="select num,name,pwd,email,subject,content,";
			sql+="ipAddr,hitCount,created from board where num=?";
			
			pstmt =conn.prepareStatement(sql);
			pstmt.setInt(1, num);
			
			rs = pstmt.executeQuery();
			if(rs.next()) {
				
				dto = new BoardDTO();
			
			dto.setNum(rs.getInt("num"));
			dto.setName(rs.getString("name"));
			dto.setPwd(rs.getString("pwd"));
			dto.setEmail(rs.getString("email"));
			dto.setSubject(rs.getString("subject"));
			dto.setContent(rs.getString("content"));
			dto.setIpAddr(rs.getString("ipAddr"));
			dto.setHitCount(rs.getInt("hitCount"));
			dto.setCreated(rs.getString("created"));
			
			}		
			rs.close();
			pstmt.close();
		} catch (Exception e) {
			System.out.println(e.toString());
		}
	return dto;
	}
	//조회수 증가 메소드
	public int updateHitCount(int num) {
		int result = 0;
		PreparedStatement pstmt =null;
		String sql;
		
		try {
			sql = "update board set hitCount = hitCount + 1 where num=?";
			
			pstmt =conn.prepareStatement(sql);
			
			pstmt.setInt(1, num);
			
			result =pstmt.executeUpdate();
			
			pstmt.close();
			
		} catch (Exception e) {
			System.out.println(e.toString());
		}
		
		return result;
		
		
		
	}
	
	//수정
	public int updateData(BoardDTO dto) {
		
		int result = 0;

		PreparedStatement pstmt = null;
		String sql;

		try {
			sql = "update board set name=?,pwd=?,email=?,subject=?,";
			sql += "content=? where num=?";

			pstmt = conn.prepareStatement(sql);

		
			pstmt.setString(1, dto.getName());
			pstmt.setString(2, dto.getPwd());
			pstmt.setString(3, dto.getEmail());
			pstmt.setString(4, dto.getSubject());
			pstmt.setString(5, dto.getContent());
			pstmt.setInt(6, dto.getNum());
		

			result = pstmt.executeUpdate();

			pstmt.close();

		} catch (Exception e) {
			System.out.println(e.toString());
		}
		return result;

	}
	//삭제
	public int deleteData(int num) {
		int result = 0;

		PreparedStatement pstmt = null;
		String sql;
		
		try {
			sql="delete board where num=?";
					
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setInt(1, num);
			result = pstmt.executeUpdate();
			pstmt.close();
			
		} catch (Exception e) {
			System.out.println(e.toString());
		}
		return result;
	}

}


	
		
	