package com.board;

import java.io.IOException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.sql.Connection;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.join.CustomInfo;
import com.util.DBConn;
import com.util.MyPage;

public class BoardServlet extends HttpServlet {

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		doPost(req, resp);
	}

	protected void forward(HttpServletRequest req, HttpServletResponse resp, String url)
			throws ServletException, IOException {
		// 포워드시키는 메소드/ 이렇게 만들어두면 경로하나만 주면 포워딩 된다.
		RequestDispatcher rd = req.getRequestDispatcher(url);

		rd.forward(req, resp);
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		// 모든 jsp파일에서 기본적으로 공통인것들!
		//req.setCharacterEncoding("UTF-8");  charEncoding 실험
		String cp = req.getContextPath();
		String uri = req.getRequestURI();

		Connection conn = DBConn.getConnection();

		BoardDAO dao = new BoardDAO(conn);

		MyPage myPage = new MyPage();

		String url;

		if (uri.indexOf("created.do") != -1) {
			
			
			HttpSession session = req.getSession();
			CustomInfo info = //이렇게 받을준비해서
					(CustomInfo)session.getAttribute("customInfo");
			
			if(info==null) {
				url = "/member/login.jsp";
				forward(req, resp, url);
				return;
			}
			

			url = "/boardTest/created.jsp";
			forward(req, resp, url);

		} else if (uri.indexOf("created_ok.do") != -1) {

			BoardDTO dto = new BoardDTO();

			int maxNum = dao.getMaxNum();

			dto.setNum(maxNum + 1);

			dto.setSubject(req.getParameter("subject"));
			dto.setName(req.getParameter("name"));
			dto.setEmail(req.getParameter("email"));
			dto.setPwd(req.getParameter("pwd"));
			dto.setContent(req.getParameter("content"));
			dto.setIpAddr(req.getRemoteAddr()); // 아이피는 이렇게 받아야한다.

			dao.insertData(dto);

			url = cp + "/bbs/list.do"; // 리다이렉트는 가상의주소로
			resp.sendRedirect(url);

		} else if (uri.indexOf("list.do") != -1) {

			String pageNum = req.getParameter("pageNum");
			int currentPage = 1;
			if (pageNum != null) {
				currentPage = Integer.parseInt(pageNum);
			}
			String searchKey = req.getParameter("searchKey");
			String searchValue = req.getParameter("searchValue");

			if (searchValue == null) {
				searchKey = "subject";
				searchValue = "";

			} else {
				if (req.getMethod().equalsIgnoreCase("GET")) {
					searchValue = URLDecoder.decode(searchValue, "UTF-8");
				}
			}

			int dataCount = dao.getDataCount(searchKey, searchValue);
			int numPerPage = 5;

			int totalPage = myPage.getPageCount(numPerPage, dataCount);

			if (currentPage > totalPage) {
				currentPage = totalPage;
			} // 이건 삭제했을떄 문제가 생길수 있어서

			// 이렇게하면 내가 가져올 romnum 시작 끝값 정해짐
			int start = (currentPage - 1) * numPerPage + 1;
			int end = currentPage * numPerPage;

			List<BoardDTO> lists = dao.getLists(start, end, searchKey, searchValue);

			String param = "";
			if (searchValue != null && !searchValue.equals("")) {
				param += "&searchValue=" + URLEncoder.encode(searchValue, "UTF-8");
			}

			String listUrl = cp + "/bbs/list.do";
			if (!param.equals("")) {
				listUrl += "?" + param; // 검색을 했으면 이렇게 보내고!
			}
			String pageIndexList = myPage.pageIndexList(currentPage, totalPage, listUrl);

			// 글보기 주소 만들기!
			String articleUrl = cp + "/bbs/article.do?pageNum=" + currentPage;
			if (!param.equals("")) {
				articleUrl += "&" + param;
			}

			// 포워딩할 데이터<지난시간에 메소드로 만들어둠>
			req.setAttribute("lists", lists);
			req.setAttribute("pageIndexList", pageIndexList);
			req.setAttribute("articleUrl", articleUrl);
			req.setAttribute("dataCount", dataCount);

			url = "/boardTest/list.jsp";
			forward(req, resp, url);

		} else if (uri.indexOf("article.do") != -1) {

			int num = Integer.parseInt(req.getParameter("num"));
			String pageNum = req.getParameter("pageNum");

			String searchKey = req.getParameter("searchKey");
			String searchValue = req.getParameter("searchValue");

			if (searchValue != null && !searchValue.equals("")) {
				searchValue = URLDecoder.decode(searchValue, "UTF-8");

			}

			dao.updateHitCount(num);

			BoardDTO dto = dao.getReadData(num);

			if (dto == null) {

				url = cp + ".bbs.list.do";
				resp.sendRedirect(url);
			}
			// 이게 라인수 계산하는거!
			int lineSu = dto.getContent().split("\n").length;

			dto.setContent(dto.getContent().replaceAll("\r", "<br/>"));

			String param = "pageNum=" + pageNum;
			if (searchValue != null && !searchValue.equals("")) {
				param += "&searchKey=" + searchKey;
				param += "&searchValue=" + URLEncoder.encode(searchValue, "UTF-8");
			}

			req.setAttribute("dto", dto);
			req.setAttribute("params", param);
			req.setAttribute("lineSu", lineSu);
			req.setAttribute("pageNum", pageNum);

			// 이코딩이 포워드 하는 코딩!
			url = "/boardTest/article.jsp";
			forward(req, resp, url);

		} else if (uri.indexOf("updated.do") != -1) {

			int num = Integer.parseInt(req.getParameter("num"));
			String pageNum = req.getParameter("pageNum");

			String searchKey = req.getParameter("searchKey");
			String searchValue = req.getParameter("searchValue");

			if (searchValue != null && !searchValue.equals("")) {
				searchValue = URLDecoder.decode(searchValue, "UTF-8");

			}

			BoardDTO dto = dao.getReadData(num);
			if (dto == null) {
				url = cp + "/bbs/list.do";
				resp.sendRedirect(url);

			}
			String param = "pageNum=" + pageNum;

			if (searchValue != null && !searchValue.equals("")) {
				param += "&searchKey=" + searchKey;
				param += "&searchValue=" + URLEncoder.encode(searchValue, "UTF-8");

			}
			req.setAttribute("dto", dto);
			req.setAttribute("pageNum", pageNum);
			req.setAttribute("params", param);
			req.setAttribute("searchKey", searchKey);
			req.setAttribute("searchValue", searchValue);

			url = "/boardTest/updated.jsp";
			forward(req, resp, url);

		} else if (uri.indexOf("updated_ok.do") != -1) {

			int num = Integer.parseInt(req.getParameter("num"));
			String pageNum = req.getParameter("pageNum");

			String searchKey = req.getParameter("searchKey");
			String searchValue = req.getParameter("searchValue");

			if (searchValue != null && !searchValue.equals("")) {
				searchValue = URLDecoder.decode(searchValue, "UTF-8");

			}

			BoardDTO dto = new BoardDTO();

			dto.setNum(Integer.parseInt(req.getParameter("num")));
			dto.setSubject(req.getParameter("subject"));
			dto.setName(req.getParameter("name"));
			dto.setEmail(req.getParameter("email"));
			dto.setPwd(req.getParameter("pwd"));
			dto.setContent(req.getParameter("content"));

			dao.updateData(dto);

			// 이제 돌아가야함
			String param = "pageNum=" + pageNum;

			if (searchValue != null && !searchValue.equals("")) {
				param += "&searchKey=" + searchKey;
				param += "&searchValue=" + URLEncoder.encode(searchValue, "UTF-8");

			}

			url = cp + "/bbs/list.do?" + param;
			resp.sendRedirect(url);

		} else if (uri.indexOf("deleted_ok") != -1) {

			int num = Integer.parseInt(req.getParameter("num"));
			String pageNum = req.getParameter("pageNum");

			String searchKey = req.getParameter("searchKey");
			String searchValue = req.getParameter("searchValue");

			if (searchValue != null && !searchValue.equals("")) {
				searchValue = URLDecoder.decode(searchValue, "UTF-8");

			}
			dao.deleteData(num);

			String param = "pageNum=" + pageNum;

			if (searchValue != null && !searchValue.equals("")) {
				param += "&searchKey=" + searchKey;
				param += "&searchValue=" + URLEncoder.encode(searchValue, "UTF-8");

			}
			url = cp + "/bbs/list.do?" + param;
			resp.sendRedirect(url);
		}

	}
}