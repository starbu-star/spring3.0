package com.exe.springJdbcTemplate;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

public class CustomDAO2 {
	
	private JdbcTemplate jdbcTemplate;
	
	public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate=jdbcTemplate; //스프링의 jdbc의존성 주입 완료
		
	}
	/**그냥 그대로 쓰면 문제가 생기기에 트라이 캐치로 묶어야함*/
	
	public void insertData(CustomDTO dto) {
		
		StringBuilder sql = new StringBuilder();
		sql.append("insert into custom(id,name,age) values(?,?,?)");
		/**sql에 있는 내용 문자로 해서 가지고 와라*/
		jdbcTemplate.update(sql.toString(),dto.getId(),dto.getName(),dto.getAge()); 
		
			
	}
	
	public List<CustomDTO> getList(){
		
			StringBuilder sql = new StringBuilder();
			
			sql.append("select id,name,age from custom");
			
			List<CustomDTO> lists = 
					jdbcTemplate.query(sql.toString(),
							new RowMapper<CustomDTO>() {//익명의 클래스

								public CustomDTO mapRow(ResultSet rs, int rowNum) 
										throws SQLException {
									
									CustomDTO dto = new CustomDTO();
									
									dto.setId(rs.getInt("id"));
									dto.setName(rs.getString("name"));
									dto.setAge(rs.getInt("age"));
									return dto;
								} 
						
					});
			
			return lists;
				
				
	}
	
	public int updateDate(CustomDTO dto) {
		
		int result = 0 ;
		PreparedStatement pstmt = null;
		String sql;
		
		try {
			conn = dataSource.getConnection(); 
			sql = "update custom set name=?,age=? where id=?";
			 pstmt = conn.prepareStatement(sql);
			
			 pstmt.setString(1, dto.getName());
			 pstmt.setInt(2, dto.getAge());
			 pstmt.setInt(3, dto.getId());
			 
			 result = pstmt.executeUpdate();
			 
			 pstmt.close();
			
		} catch (Exception e) {
		System.out.println(e.toString());
		}
		return result;
	}
	//하나의 데이터 읽어오기
	public CustomDTO getReadData(int id) {
		
			StringBuilder sql = new StringBuilder();
			
			sql.append("select id,name,age from custom where id=?");
			
			CustomDTO dtoOne =
					jdbcTemplate.queryForObject(sql.toString(), 
							new RowMapper<CustomDTO>() {
						

								public CustomDTO mapRow(ResultSet rs, int rowNum) throws SQLException {
									CustomDTO dto = new CustomDTO();
									
									dto.setId(rs.getInt("id"));
									dto.setName(rs.getString("name"));
									dto.setAge(rs.getInt("age"));
									
									return dto;
								}
						
						
					},id); //이렇게 해야 id로 하나의 데이터 읽어올수있음
			
				
				return dtoOne;
			}
			
		
		return dto;
	}

	public int deleteData(int id) {
		int result =0;
		PreparedStatement pstmt = null;
		String sql;
		
		try {
			conn = dataSource.getConnection();
			
			sql ="delete custom where id =?";
			
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setInt(1, id);
			
			result = pstmt.executeUpdate();
			
			pstmt.close();
		} catch (Exception e) {
			System.out.println(e.toString());
		}
		return result;
	}
}
